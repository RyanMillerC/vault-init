apiVersion: v1
data:
  post-install.sh: |
    #!/bin/bash

    CLUSTER_NAME=admin

    set -e

    # /bin is protected, so I'm downloading executables to /tmp
    [[ ! -d /tmp/bin ]] && mkdir /tmp/bin
    export PATH="$PATH:/tmp/bin"

    # TODO: Should be able to curl k8s API instead of downloading oc
    curl -L -o /tmp/bin/oc https://downloads-openshift-console.apps.hub.taco.moe/amd64/linux/oc
    chmod +x /tmp/bin/oc

    curl -L -o /tmp/bin/jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
    chmod +x /tmp/bin/jq

    unseal-vault() {
      # We will need 3/5 keys to unseal each Vault instance
      VAULT_UNSEAL_KEY1=$(jq -r '.unseal_keys_b64[0]' /tmp/recovery-keys.json)
      VAULT_UNSEAL_KEY2=$(jq -r '.unseal_keys_b64[1]' /tmp/recovery-keys.json)
      VAULT_UNSEAL_KEY3=$(jq -r '.unseal_keys_b64[2]' /tmp/recovery-keys.json)

      vault operator unseal "$VAULT_UNSEAL_KEY1"
      vault operator unseal "$VAULT_UNSEAL_KEY2"
      vault operator unseal "$VAULT_UNSEAL_KEY3"
    }

    # Don't attempt to initialize if vault-recovery-keys secret exists.
    # (since vault is already initialized, it only needs to be unsealed)
    if oc get secrets vault-recovery-keys &> /dev/null; then
        echo 'Vault is already initialized!'
        echo 'Using vault-recovery-key secret to unseal vault...'
        oc get secret vault-recovery-keys \
            -o jsonpath="{.data.recovery-keys\.json}" \
            | base64 -d > /tmp/recovery-keys.json
        unseal-vault
        echo 'Vault is unsealed!'
        exit 0
    fi

    echo 'Initializing vault...'
    vault operator init -format=json > /tmp/recovery-keys.json

    echo 'Creating vault-recovery-keys secret...'
    oc create secret generic vault-recovery-keys --from-file=/tmp/recovery-keys.json

    # TODO: Should probably remove the recovery keys from pod after creating secret

    echo 'Unsealing vault...'
    unseal-vault

    VAULT_ROOT_TOKEN=$(jq -r '.root_token' /tmp/recovery-keys.json)
    vault login - <<< "$VAULT_ROOT_TOKEN"

    echo "Enabling $CLUSTER_NAME kubernetes engine..."
    vault auth enable -path="$CLUSTER_NAME" kubernetes

    echo "Authorizing cluster CA..."
    vault write "auth/$CLUSTER_NAME/config" \
        token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
        kubernetes_ca_cert="@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        # issuer=https://kubernetes.default.svc
        # No clue if the above line is needed

    # echo "Gettting cluster accessor..."
    # MOUNT_ACCESSOR=$(vault auth list -format=json | jq -r ".\"$CLUSTER_NAME/\".accessor")

    vault policy write admin - << EOF
    path "*" {
      capabilities = ["sudo", "create", "read", "update", "delete", "list"]
    }

    path "sys/*" {
      capabilities = ["sudo", "create", "read", "update", "delete", "list"]
    }
    EOF

    # echo "Writing $CLUSTER_NAME-read policy..."
    # vault policy write "$CLUSTER_NAME-read" - << EOF
    # path "hub/data/{{ "{{" }}identity.entity.aliases.$MOUNT_ACCESSOR.metadata.service_account_namespace{{ "}}" }}/*" {
    #    capabilities=["read","list"]
    # }
    # EOF

    # echo "Add kv store for cluster..."
    # vault secrets enable -version=2 -path="$CLUSTER_NAME" kv

    vault write \
        "auth/$CLUSTER_NAME/role/admin" \
        bound_service_account_names=vault-server \
        bound_service_account_namespaces=vault-server \
        policies=admin
        ttl=60m

    echo "Done!"
kind: ConfigMap
metadata:
  name: post-install-script
  namespace: vault-server
